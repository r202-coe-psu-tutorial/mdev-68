# Multi-stage build for production
FROM debian:sid-slim as builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    python3 python3-dev python3-pip python3-venv \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python3 -m venv /venv
ENV PATH="/venv/bin:$PATH"

# Install Poetry
RUN pip install --no-cache-dir wheel poetry

# Set work directory
WORKDIR /build

# Copy dependency files
COPY poetry.lock pyproject.toml README.md ./

# Configure poetry and install dependencies
RUN poetry config virtualenvs.create false \
    && poetry install --only main --no-interaction --no-root

# Copy application code
COPY . .

# Install the application
RUN poetry install --only main --no-interaction

# Production stage
FROM debian:sid-slim

# Create non-root user
RUN groupadd -r app && useradd -r -g app app

# Install only runtime dependencies
RUN apt-get update && apt-get install -y \
    python3 \
    sqlite3 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy virtual environment from builder
COPY --from=builder /venv /venv

# Copy application
COPY --from=builder /build /app

# Set environment variables
ENV PATH="/venv/bin:$PATH" \
    PYTHONPATH="/app" \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    ENVIRONMENT=production

# Create data directory and set ownership
RUN mkdir -p /app/data && chown -R app:app /app

# Switch to non-root user
USER app

# Set working directory
WORKDIR /app

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD python3 -c "import requests; requests.get('http://localhost:8000/health', timeout=10)" || exit 1

# Expose port
EXPOSE 8000

# Run the application
CMD ["python3", "-m", "fastapi", "run", "flasx/main.py", "--host", "0.0.0.0", "--port", "8000"]
