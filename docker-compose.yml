services:
  # FastAPI Development Server
  flasx-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
      args:
        - INSTALL_DEV=true
    image: flasx:dev
    container_name: flasx-dev
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - RELOAD=true
      - SQLDB_URL=postgresql+asyncpg://flasx_user:flasx_password@postgres:5432/flasx_dev_db
      - LOG_LEVEL=DEBUG
    env_file:
      - .env.dev
    volumes:
      # Mount source code for hot reloading
      - .:/home/app/code:rw

    working_dir: /home/app/code
    command: >
      bash -c "
        cd /home/app/code &&
        poetry install &&
        poetry run fastapi dev flasx/main.py --host 0.0.0.0 --port 8000 --reload
      "
    depends_on:
      - postgres
    networks:
      - flasx-dev-network

  # PostgreSQL Database for Development
  postgres:
    image: postgres:17-alpine
    container_name: flasx-postgres-dev
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: flasx_dev_db
      POSTGRES_USER: flasx_user
      POSTGRES_PASSWORD: flasx_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    networks:
      - flasx-dev-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U flasx_user -d flasx_dev_db" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgAdmin for Database Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: flasx-pgadmin-dev
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: "admin@example.com"
      PGADMIN_DEFAULT_PASSWORD: adminadmin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_dev_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - flasx-dev-network
    profiles:
      - tools

  # Test Runner Service
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.dev
      args:
        - INSTALL_DEV=true
    image: flasx:dev
    container_name: flasx-test-runner
    volumes:
      - .:/home/app/code:rw
    working_dir: /home/app/code
    environment:
      - ENVIRONMENT=test
      - SQLDB_URL=sqlite+aiosqlite:///./data/test_database.db
    command: >
      bash -c "
        cd /home/app/code &&
        poetry install --no-interaction &&
        poetry run pytest tests/ -v --cov=flasx --cov-report=html:/home/app/code/test-reports/coverage --cov-report=term
      "
    networks:
      - flasx-dev-network
    profiles:
      - test

# Named volumes for persistent data
volumes:
  postgres_dev_data:
    driver: local
  pgadmin_dev_data:
    driver: local

# Development network
networks:
  flasx-dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 10.0.0.0/16
